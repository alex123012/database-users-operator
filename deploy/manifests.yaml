apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: controller-manager
  name: database-users-operator-system
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: database-users-operator-system/database-users-operator-serving-cert
    controller-gen.kubebuilder.io/version: v0.9.2
  name: configs.auth.alex123012.com
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: database-users-operator-webhook-service
          namespace: database-users-operator-system
          path: /convert
      conversionReviewVersions:
      - v1
  group: auth.alex123012.com
  names:
    kind: Config
    listKind: ConfigList
    plural: configs
    singular: config
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Config is the Schema for the configs API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ConfigSpec defines the desired state of Config
            properties:
              databaseType:
                description: Type of database to connect, required
                type: string
              postgreSQL:
                description: Config for connecting for PostgreSQL compatible databases,
                  not required. required if DatabaseType equals to "PostgreSQL"
                properties:
                  databaseName:
                    description: Database name that will be used to connect to database,
                      not required refer to --dbname flag in https://www.postgresql.org/docs/current/app-psql.html
                    type: string
                  host:
                    description: Full DNS name/ip for database to use, required. If
                      K8S service is used to connect - provide host as <db-service-name>.<db-service-namespace>.svc.cluster.local
                      refer to --host flag in https://www.postgresql.org/docs/current/app-psql.html
                    type: string
                  passwordSecret:
                    description: Secret with password for User to connect to database
                      If SSL Mode equals to "disable", "allow" or "prefer" field is
                      required. If SSL Mode equals to "require", "verify-ca" or "verify-full"
                      - not required.
                    properties:
                      name:
                        description: Kubernetes secret name, required
                        type: string
                      namespace:
                        description: Kubernetes secret namespace, required
                        type: string
                    required:
                    - name
                    - namespace
                    type: object
                  port:
                    description: k8s-service/database port to connect to execute queries,
                      defaults to 5432. refer to --port flag in https://www.postgresql.org/docs/current/app-psql.html
                    type: integer
                  sslMode:
                    description: 'SSL mode that will be used to connect to PostgreSQL,
                      defaults to "disable". Posssible values: "disable", "allow",
                      "prefer", "require", "verify-ca", "verify-full". If SSL mode
                      is "require", "verify-ca", "verify-full" - operator will generate
                      K8S secret with SSL bundle (CA certificate, user certificate
                      and user key) for User CR with same name as User CR. see https://www.postgresql.org/docs/current/libpq-ssl.html'
                    type: string
                  sslSecrets:
                    description: SSL CA certificate, user certificate and user key
                      K8S secrets. If SSL Mode equals to "disable", "allow" or "prefer"
                      field is not required. If SSL Mode equals to "require", "verify-ca"
                      or "verify-full" - required.
                    properties:
                      caSecret:
                        description: for user certificate - secrets data key must
                          be "tls.crt" for user key - secrets data key must be "tls.key"
                        properties:
                          name:
                            description: Kubernetes secret name, required
                            type: string
                          namespace:
                            description: Kubernetes secret namespace, required
                            type: string
                        required:
                        - name
                        - namespace
                        type: object
                      userSecret:
                        description: for CA certificate - secrets data key must be
                          "ca.crt"
                        properties:
                          name:
                            description: Kubernetes secret name, required
                            type: string
                          namespace:
                            description: Kubernetes secret namespace, required
                            type: string
                        required:
                        - name
                        - namespace
                        type: object
                    required:
                    - caSecret
                    - userSecret
                    type: object
                  user:
                    description: User that will be used to connect to database, defaults
                      to "postgres". It must have at least CREATEROLE privilege (if
                      you won't provide superuser acess to users) or database superuser
                      role if you think you'll be needed to give some users database
                      superuser privileges refer to --username flag in https://www.postgresql.org/docs/current/app-psql.html
                      and https://www.postgresql.org/docs/current/sql-grant.html "GRANT
                      on Roles"
                    type: string
                required:
                - host
                - port
                - sslMode
                - user
                type: object
            required:
            - databaseType
            type: object
          status:
            description: ConfigStatus defines the observed state of Config
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    cert-manager.io/inject-ca-from: database-users-operator-system/database-users-operator-serving-cert
    controller-gen.kubebuilder.io/version: v0.9.2
  name: users.auth.alex123012.com
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: database-users-operator-webhook-service
          namespace: database-users-operator-system
          path: /convert
      conversionReviewVersions:
      - v1
  group: auth.alex123012.com
  names:
    kind: User
    listKind: UserList
    plural: users
    singular: user
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: User is the Schema for the users API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: UserSpec defines the desired state of User
            properties:
              databaseConfigs:
                description: List of Configs that will be used to create users
                items:
                  description: Utility struct for Config CR specification
                  properties:
                    name:
                      description: Name of Config resource
                      type: string
                    namespace:
                      description: Namespace of config resource
                      type: string
                  required:
                  - name
                  - namespace
                  type: object
                type: array
              passwordSecret:
                description: K8S secret with key "password" for user password to assign,
                  not required
                properties:
                  name:
                    description: Kubernetes secret name, required
                    type: string
                  namespace:
                    description: Kubernetes secret namespace, required
                    type: string
                required:
                - name
                - namespace
                type: object
              privileges:
                description: List of database privileges that will be applied to user.
                  If user already exists in database - all it privileges will be synchronized
                  with this list (all privileges that are not defined in the lis will
                  be revoked).
                items:
                  properties:
                    database:
                      description: If Privilege is database specific - this field
                        will be used to determine which db to use (used PrivilegeType
                        from PrivilegeTypeDatabase or PrivilegeTypeTable)
                      type: string
                    "on":
                      description: if used PrivilegeType from PrivilegeTypeTable in
                        Privilege field specify object to give Privilege to in database
                      type: string
                    privilege:
                      description: Privilege is role name or PrivilegeType
                      type: string
                  required:
                  - privilege
                  type: object
                type: array
            required:
            - databaseConfigs
            - privileges
            type: object
          status:
            description: UserStatus defines the observed state of User
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: database-users-operator-controller-manager
  namespace: database-users-operator-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: database-users-operator-manager-role
rules:
- apiGroups:
  - auth.alex123012.com
  resources:
  - configs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - auth.alex123012.com
  resources:
  - users
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - auth.alex123012.com
  resources:
  - users/finalizers
  verbs:
  - update
- apiGroups:
  - auth.alex123012.com
  resources:
  - users/status
  verbs:
  - get
  - patch
  - update
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: database-users-operator-manager-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: database-users-operator-manager-role
subjects:
- kind: ServiceAccount
  name: database-users-operator-controller-manager
  namespace: database-users-operator-system
---
apiVersion: v1
kind: Service
metadata:
  name: database-users-operator-webhook-service
  namespace: database-users-operator-system
spec:
  ports:
  - port: 443
    protocol: TCP
    targetPort: 9443
  selector:
    control-plane: controller-manager
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    control-plane: controller-manager
  name: database-users-operator-controller-manager
  namespace: database-users-operator-system
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        control-plane: controller-manager
    spec:
      containers:
      - command:
        - /manager
        image: ghcr.io/alex123012/database-users-operator:v0.0.4
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        name: manager
        ports:
        - containerPort: 9443
          name: webhook-server
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 10m
            memory: 64Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /tmp/k8s-webhook-server/serving-certs
          name: cert
          readOnly: true
      securityContext:
        runAsNonRoot: true
      serviceAccountName: database-users-operator-controller-manager
      terminationGracePeriodSeconds: 10
      volumes:
      - name: cert
        secret:
          defaultMode: 420
          secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: database-users-operator-serving-cert
  namespace: database-users-operator-system
spec:
  dnsNames:
  - database-users-operator-webhook-service.database-users-operator-system.svc
  - database-users-operator-webhook-service.database-users-operator-system.svc.cluster.local
  issuerRef:
    kind: Issuer
    name: database-users-operator-selfsigned-issuer
  secretName: webhook-server-cert
---
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: database-users-operator-selfsigned-issuer
  namespace: database-users-operator-system
spec:
  selfSigned: {}
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: database-users-operator-system/database-users-operator-serving-cert
  name: database-users-operator-mutating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: database-users-operator-webhook-service
      namespace: database-users-operator-system
      path: /mutate-auth-alex123012-com-v1alpha1-config
  failurePolicy: Fail
  name: mconfig.kb.io
  rules:
  - apiGroups:
    - auth.alex123012.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - configs
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: database-users-operator-webhook-service
      namespace: database-users-operator-system
      path: /mutate-auth-alex123012-com-v1alpha1-user
  failurePolicy: Fail
  name: muser.kb.io
  rules:
  - apiGroups:
    - auth.alex123012.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - users
  sideEffects: None
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  annotations:
    cert-manager.io/inject-ca-from: database-users-operator-system/database-users-operator-serving-cert
  name: database-users-operator-validating-webhook-configuration
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: database-users-operator-webhook-service
      namespace: database-users-operator-system
      path: /validate-auth-alex123012-com-v1alpha1-config
  failurePolicy: Fail
  name: vconfig.kb.io
  rules:
  - apiGroups:
    - auth.alex123012.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - configs
  sideEffects: None
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: database-users-operator-webhook-service
      namespace: database-users-operator-system
      path: /validate-auth-alex123012-com-v1alpha1-user
  failurePolicy: Fail
  name: vuser.kb.io
  rules:
  - apiGroups:
    - auth.alex123012.com
    apiVersions:
    - v1alpha1
    operations:
    - CREATE
    - UPDATE
    resources:
    - users
  sideEffects: None
